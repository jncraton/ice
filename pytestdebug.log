versions pytest-8.3.3, python-3.10.12.final.0
invocation_dir=/home/tai/Documents/cpsc_4430_vandam/ice
cwd=/home/tai/Documents/cpsc_4430_vandam/ice
args=('--browser', 'firefox', '--debug', '--headed')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x7f639a0aea70>
    pytest_plugin_registered [hook]
        plugin: <Session  exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        plugin_name: session
        manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x7f639a0aea70>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f6399fa17b0>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f6399fa12d0>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
          plugin_name: 140065771502560
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7f639a0aea70>
          plugin_name: pytestconfig
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/mark/__init__.py'>
          plugin_name: mark
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/main.py'>
          plugin_name: main
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/runner.py'>
          plugin_name: runner
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/fixtures.py'>
          plugin_name: fixtures
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/helpconfig.py'>
          plugin_name: helpconfig
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/python.py'>
          plugin_name: python
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/terminal.py'>
          plugin_name: terminal
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/debugging.py'>
          plugin_name: debugging
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/unittest.py'>
          plugin_name: unittest
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/capture.py'>
          plugin_name: capture
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/skipping.py'>
          plugin_name: skipping
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/legacypath.py'>
          plugin_name: legacypath
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/tmpdir.py'>
          plugin_name: tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/monkeypatch.py'>
          plugin_name: monkeypatch
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/recwarn.py'>
          plugin_name: recwarn
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/pastebin.py'>
          plugin_name: pastebin
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/assertion/__init__.py'>
          plugin_name: assertion
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/junitxml.py'>
          plugin_name: junitxml
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/doctest.py'>
          plugin_name: doctest
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/cacheprovider.py'>
          plugin_name: cacheprovider
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/freeze_support.py'>
          plugin_name: freeze_support
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/setuponly.py'>
          plugin_name: setuponly
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/setupplan.py'>
          plugin_name: setupplan
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/stepwise.py'>
          plugin_name: stepwise
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/warnings.py'>
          plugin_name: warnings
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/logging.py'>
          plugin_name: logging
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/reports.py'>
          plugin_name: reports
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/python_path.py'>
          plugin_name: python_path
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/unraisableexception.py'>
          plugin_name: unraisableexception
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/threadexception.py'>
          plugin_name: threadexception
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/faulthandler.py'>
          plugin_name: faulthandler
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'anyio.pytest_plugin' from '/home/tai/.local/lib/python3.10/site-packages/anyio/pytest_plugin.py'>
          plugin_name: anyio
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_playwright.pytest_playwright' from '/home/tai/.local/lib/python3.10/site-packages/pytest_playwright/pytest_playwright.py'>
          plugin_name: playwright
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_base_url.plugin' from '/home/tai/.local/lib/python3.10/site-packages/pytest_base_url/plugin.py'>
          plugin_name: base_url
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          plugin_name: capturemanager
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          plugin_name: session
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f6399fa17b0>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f6399fa12d0>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f6399fa1ea0>
          plugin_name: terminalreporter
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f6399fa1d20>
          plugin_name: logging-plugin
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
          plugin_name: 140065771502560
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7f639a0aea70>
          plugin_name: pytestconfig
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/mark/__init__.py'>
          plugin_name: mark
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/main.py'>
          plugin_name: main
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/runner.py'>
          plugin_name: runner
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/fixtures.py'>
          plugin_name: fixtures
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/helpconfig.py'>
          plugin_name: helpconfig
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/python.py'>
          plugin_name: python
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/terminal.py'>
          plugin_name: terminal
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/debugging.py'>
          plugin_name: debugging
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/unittest.py'>
          plugin_name: unittest
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/capture.py'>
          plugin_name: capture
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/skipping.py'>
          plugin_name: skipping
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/legacypath.py'>
          plugin_name: legacypath
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/tmpdir.py'>
          plugin_name: tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/monkeypatch.py'>
          plugin_name: monkeypatch
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/recwarn.py'>
          plugin_name: recwarn
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/pastebin.py'>
          plugin_name: pastebin
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/assertion/__init__.py'>
          plugin_name: assertion
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/junitxml.py'>
          plugin_name: junitxml
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/doctest.py'>
          plugin_name: doctest
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/cacheprovider.py'>
          plugin_name: cacheprovider
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/freeze_support.py'>
          plugin_name: freeze_support
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/setuponly.py'>
          plugin_name: setuponly
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/setupplan.py'>
          plugin_name: setupplan
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/stepwise.py'>
          plugin_name: stepwise
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/warnings.py'>
          plugin_name: warnings
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/logging.py'>
          plugin_name: logging
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/reports.py'>
          plugin_name: reports
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/python_path.py'>
          plugin_name: python_path
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/unraisableexception.py'>
          plugin_name: unraisableexception
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/threadexception.py'>
          plugin_name: threadexception
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/faulthandler.py'>
          plugin_name: faulthandler
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'anyio.pytest_plugin' from '/home/tai/.local/lib/python3.10/site-packages/anyio/pytest_plugin.py'>
          plugin_name: anyio
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_playwright.pytest_playwright' from '/home/tai/.local/lib/python3.10/site-packages/pytest_playwright/pytest_playwright.py'>
          plugin_name: playwright
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_base_url.plugin' from '/home/tai/.local/lib/python3.10/site-packages/pytest_base_url/plugin.py'>
          plugin_name: base_url
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          plugin_name: capturemanager
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          plugin_name: session
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f6399fa17b0>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f6399fa12d0>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f6399fa1ea0>
          plugin_name: terminalreporter
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f6399fa1d20>
          plugin_name: logging-plugin
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x7f6399fa18d0>
          plugin_name: funcmanage
          manager: <_pytest.config.PytestPluginManager object at 0x7f639a8e3be0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x7f639a0aea70>
          start_path: /home/tai/Documents/cpsc_4430_vandam/ice
          startdir: /home/tai/Documents/cpsc_4430_vandam/ice
      early skip of rewriting module: email.parser [assertion]
      early skip of rewriting module: email.feedparser [assertion]
      finish pytest_report_header --> [['rootdir: /home/tai/Documents/cpsc_4430_vandam/ice', 'configfile: pytest.ini', 'plugins: anyio-3.7.1, playwright-0.5.2, base-url-2.1.0'], ['using: pytest-8.3.3', 'registered third-party plugins:', '  anyio-3.7.1 at /home/tai/.local/lib/python3.10/site-packages/anyio/pytest_plugin.py', '  pytest-playwright-0.5.2 at /home/tai/.local/lib/python3.10/site-packages/pytest_playwright/pytest_playwright.py', '  pytest-base-url-2.1.0 at /home/tai/.local/lib/python3.10/site-packages/pytest_base_url/plugin.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['/home/tai/Documents/cpsc_4430_vandam/ice'] [collection]
        pytest_collectstart [hook]
            collector: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument CollectionArgument(path=PosixPath('/home/tai/Documents/cpsc_4430_vandam/ice'), parts=[], module_name=None) [collection]
            pytest_collect_directory [hook]
                path: /home/tai/Documents/cpsc_4430_vandam/ice
                parent: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> <Dir ice> [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=1 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=1 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Dir ice> [collection]
      pytest_collectstart [hook]
          collector: <Dir ice>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir ice>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/.git
            path: /home/tai/Documents/cpsc_4430_vandam/ice/.git
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/.github
            path: /home/tai/Documents/cpsc_4430_vandam/ice/.github
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/.gitignore
            path: /home/tai/Documents/cpsc_4430_vandam/ice/.gitignore
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir ice>
            file_path: /home/tai/Documents/cpsc_4430_vandam/ice/.gitignore
            path: /home/tai/Documents/cpsc_4430_vandam/ice/.gitignore
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/.prettierrc.json
            path: /home/tai/Documents/cpsc_4430_vandam/ice/.prettierrc.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir ice>
            file_path: /home/tai/Documents/cpsc_4430_vandam/ice/.prettierrc.json
            path: /home/tai/Documents/cpsc_4430_vandam/ice/.prettierrc.json
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/.pytest_cache
            path: /home/tai/Documents/cpsc_4430_vandam/ice/.pytest_cache
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/README.md
            path: /home/tai/Documents/cpsc_4430_vandam/ice/README.md
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir ice>
            file_path: /home/tai/Documents/cpsc_4430_vandam/ice/README.md
            path: /home/tai/Documents/cpsc_4430_vandam/ice/README.md
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/node_modules
            path: /home/tai/Documents/cpsc_4430_vandam/ice/node_modules
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/package-lock.json
            path: /home/tai/Documents/cpsc_4430_vandam/ice/package-lock.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir ice>
            file_path: /home/tai/Documents/cpsc_4430_vandam/ice/package-lock.json
            path: /home/tai/Documents/cpsc_4430_vandam/ice/package-lock.json
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/package.json
            path: /home/tai/Documents/cpsc_4430_vandam/ice/package.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir ice>
            file_path: /home/tai/Documents/cpsc_4430_vandam/ice/package.json
            path: /home/tai/Documents/cpsc_4430_vandam/ice/package.json
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/pytest.ini
            path: /home/tai/Documents/cpsc_4430_vandam/ice/pytest.ini
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir ice>
            file_path: /home/tai/Documents/cpsc_4430_vandam/ice/pytest.ini
            path: /home/tai/Documents/cpsc_4430_vandam/ice/pytest.ini
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/pytestdebug.log
            path: /home/tai/Documents/cpsc_4430_vandam/ice/pytestdebug.log
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir ice>
            file_path: /home/tai/Documents/cpsc_4430_vandam/ice/pytestdebug.log
            path: /home/tai/Documents/cpsc_4430_vandam/ice/pytestdebug.log
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/requirements.txt
            path: /home/tai/Documents/cpsc_4430_vandam/ice/requirements.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir ice>
            file_path: /home/tai/Documents/cpsc_4430_vandam/ice/requirements.txt
            path: /home/tai/Documents/cpsc_4430_vandam/ice/requirements.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/tests
            path: /home/tai/Documents/cpsc_4430_vandam/ice/tests
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/tai/Documents/cpsc_4430_vandam/ice/tests
            parent: <Dir ice>
        finish pytest_collect_directory --> <Dir tests> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/www
            path: /home/tai/Documents/cpsc_4430_vandam/ice/www
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/tai/Documents/cpsc_4430_vandam/ice/www
            parent: <Dir ice>
        finish pytest_collect_directory --> <Dir www> [hook]
      finish pytest_make_collect_report --> <CollectReport '.' lenresult=2 outcome='passed'> [hook]
    genitems <Dir tests> [collection]
      pytest_collectstart [hook]
          collector: <Dir tests>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir tests>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/__pycache__
            path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/main_page_test.py
            path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/main_page_test.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir tests>
            file_path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/main_page_test.py
            path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/main_page_test.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir tests>
              module_path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/main_page_test.py
              path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/main_page_test.py
          finish pytest_pycollect_makemodule --> <Module main_page_test.py> [hook]
        finish pytest_collect_file --> [<Module main_page_test.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/run_code_test.py
            path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/run_code_test.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir tests>
            file_path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/run_code_test.py
            path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/run_code_test.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir tests>
              module_path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/run_code_test.py
              path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/run_code_test.py
          finish pytest_pycollect_makemodule --> <Module run_code_test.py> [hook]
        finish pytest_collect_file --> [<Module run_code_test.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/student_page_test.py
            path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/student_page_test.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir tests>
            file_path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/student_page_test.py
            path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/student_page_test.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir tests>
              module_path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/student_page_test.py
              path: /home/tai/Documents/cpsc_4430_vandam/ice/tests/student_page_test.py
          finish pytest_pycollect_makemodule --> <Module student_page_test.py> [hook]
        finish pytest_collect_file --> [<Module student_page_test.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests' lenresult=3 outcome='passed'> [hook]
    genitems <Module main_page_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module main_page_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module main_page_test.py>
      find_module called for: main_page_test [assertion]
      matched test file '/home/tai/Documents/cpsc_4430_vandam/ice/tests/main_page_test.py' [assertion]
      found cached rewritten pyc for /home/tai/Documents/cpsc_4430_vandam/ice/tests/main_page_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module main_page_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module main_page_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module main_page_test.py>
            name: Page
            obj: <class 'playwright.sync_api._generated.Page'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module main_page_test.py>
            name: expect
            obj: <playwright.sync_api.Expect object at 0x7f63999002b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module main_page_test.py>
            name: Error
            obj: <class 'playwright._impl._errors.Error'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module main_page_test.py>
            name: pytest
            obj: <module 'pytest' from '/home/tai/.local/lib/python3.10/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module main_page_test.py>
            name: before_each
            obj: <function before_each at 0x7f63992cf760>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module main_page_test.py>
            name: test_title
            obj: <function test_title at 0x7f63992cf7f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f6399fffd60>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f639a0aea70>
                val: firefox
                argname: browser_name
            finish pytest_make_parametrize_id --> None [hook]
          early skip of rewriting module: encodings.unicode_escape [assertion]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_title[firefox]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module main_page_test.py>
            name: test_desired_outcome
            obj: <function test_desired_outcome at 0x7f63992cf640>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f6399fffd90>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f639a0aea70>
                val: firefox
                argname: browser_name
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_desired_outcome[firefox]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module main_page_test.py>
            name: test_student_link_navigates
            obj: <function test_student_link_navigates at 0x7f63992cf880>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f6399fffdc0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f639a0aea70>
                val: firefox
                argname: browser_name
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_student_link_navigates[firefox]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module main_page_test.py>
            name: test_embed_code_generation
            obj: <function test_embed_code_generation at 0x7f63992cf910>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f6399fffd60>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f639a0aea70>
                val: firefox
                argname: browser_name
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_embed_code_generation[firefox]>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/main_page_test.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_title[firefox]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_title[firefox]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_desired_outcome[firefox]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_desired_outcome[firefox]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_student_link_navigates[firefox]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_student_link_navigates[firefox]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_embed_code_generation[firefox]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_embed_code_generation[firefox]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/main_page_test.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module run_code_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module run_code_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module run_code_test.py>
      find_module called for: run_code_test [assertion]
      matched test file '/home/tai/Documents/cpsc_4430_vandam/ice/tests/run_code_test.py' [assertion]
      found cached rewritten pyc for /home/tai/Documents/cpsc_4430_vandam/ice/tests/run_code_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module run_code_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module run_code_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module run_code_test.py>
            name: Page
            obj: <class 'playwright.sync_api._generated.Page'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module run_code_test.py>
            name: expect
            obj: <playwright.sync_api.Expect object at 0x7f63999002b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module run_code_test.py>
            name: test_python_runs_teacher
            obj: <function test_python_runs_teacher at 0x7f63992cff40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f6399fffca0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f639a0aea70>
                val: firefox
                argname: browser_name
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_python_runs_teacher[firefox]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module run_code_test.py>
            name: test_buttons_disable_teacher
            obj: <function test_buttons_disable_teacher at 0x7f6399308040>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f6399fff670>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f639a0aea70>
                val: firefox
                argname: browser_name
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_buttons_disable_teacher[firefox]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module run_code_test.py>
            name: test_python_runs_student
            obj: <function test_python_runs_student at 0x7f63993080d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f6399fffd90>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f639a0aea70>
                val: firefox
                argname: browser_name
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_python_runs_student[firefox]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module run_code_test.py>
            name: test_buttons_disable_student
            obj: <function test_buttons_disable_student at 0x7f6399308160>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f6399fffca0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f639a0aea70>
                val: firefox
                argname: browser_name
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_buttons_disable_student[firefox]>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/run_code_test.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_python_runs_teacher[firefox]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_python_runs_teacher[firefox]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_buttons_disable_teacher[firefox]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_buttons_disable_teacher[firefox]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_python_runs_student[firefox]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_python_runs_student[firefox]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_buttons_disable_student[firefox]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_buttons_disable_student[firefox]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/run_code_test.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module student_page_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module student_page_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module student_page_test.py>
      find_module called for: student_page_test [assertion]
      matched test file '/home/tai/Documents/cpsc_4430_vandam/ice/tests/student_page_test.py' [assertion]
      found cached rewritten pyc for /home/tai/Documents/cpsc_4430_vandam/ice/tests/student_page_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module student_page_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module student_page_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/tai/.local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module student_page_test.py>
            name: Page
            obj: <class 'playwright.sync_api._generated.Page'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module student_page_test.py>
            name: expect
            obj: <playwright.sync_api.Expect object at 0x7f63999002b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module student_page_test.py>
            name: pytest
            obj: <module 'pytest' from '/home/tai/.local/lib/python3.10/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module student_page_test.py>
            name: before_each
            obj: <function before_each at 0x7f63993084c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module student_page_test.py>
            name: test_title
            obj: <function test_title at 0x7f6399308550>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f6399f5b940>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f639a0aea70>
                val: firefox
                argname: browser_name
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_title[firefox]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module student_page_test.py>
            name: test_student_input
            obj: <function test_student_input at 0x7f63993085e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f6399f5b9d0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f639a0aea70>
                val: firefox
                argname: browser_name
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_student_input[firefox]>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/student_page_test.py' lenresult=2 outcome='passed'> [hook]
    genitems <Function test_title[firefox]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_title[firefox]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_student_input[firefox]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_student_input[firefox]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/student_page_test.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir www> [collection]
      pytest_collectstart [hook]
          collector: <Dir www>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir www>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/www/index.html
            path: /home/tai/Documents/cpsc_4430_vandam/ice/www/index.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir www>
            file_path: /home/tai/Documents/cpsc_4430_vandam/ice/www/index.html
            path: /home/tai/Documents/cpsc_4430_vandam/ice/www/index.html
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/www/main.js
            path: /home/tai/Documents/cpsc_4430_vandam/ice/www/main.js
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir www>
            file_path: /home/tai/Documents/cpsc_4430_vandam/ice/www/main.js
            path: /home/tai/Documents/cpsc_4430_vandam/ice/www/main.js
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/www/student.html
            path: /home/tai/Documents/cpsc_4430_vandam/ice/www/student.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir www>
            file_path: /home/tai/Documents/cpsc_4430_vandam/ice/www/student.html
            path: /home/tai/Documents/cpsc_4430_vandam/ice/www/student.html
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/www/student.js
            path: /home/tai/Documents/cpsc_4430_vandam/ice/www/student.js
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir www>
            file_path: /home/tai/Documents/cpsc_4430_vandam/ice/www/student.js
            path: /home/tai/Documents/cpsc_4430_vandam/ice/www/student.js
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/www/style.css
            path: /home/tai/Documents/cpsc_4430_vandam/ice/www/style.css
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir www>
            file_path: /home/tai/Documents/cpsc_4430_vandam/ice/www/style.css
            path: /home/tai/Documents/cpsc_4430_vandam/ice/www/style.css
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/www/textarea.js
            path: /home/tai/Documents/cpsc_4430_vandam/ice/www/textarea.js
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir www>
            file_path: /home/tai/Documents/cpsc_4430_vandam/ice/www/textarea.js
            path: /home/tai/Documents/cpsc_4430_vandam/ice/www/textarea.js
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            collection_path: /home/tai/Documents/cpsc_4430_vandam/ice/www/worker.js
            path: /home/tai/Documents/cpsc_4430_vandam/ice/www/worker.js
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir www>
            file_path: /home/tai/Documents/cpsc_4430_vandam/ice/www/worker.js
            path: /home/tai/Documents/cpsc_4430_vandam/ice/www/worker.js
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'www' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'www' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport '.' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x7f639a0aea70>
          items: [<Function test_title[firefox]>, <Function test_desired_outcome[firefox]>, <Function test_student_link_navigates[firefox]>, <Function test_embed_code_generation[firefox]>, <Function test_python_runs_teacher[firefox]>, <Function test_buttons_disable_teacher[firefox]>, <Function test_python_runs_student[firefox]>, <Function test_buttons_disable_student[firefox]>, <Function test_title[firefox]>, <Function test_student_input[firefox]>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x7f639a0aea70>
            items: [<Function test_title[firefox]>, <Function test_desired_outcome[firefox]>, <Function test_student_link_navigates[firefox]>, <Function test_embed_code_generation[firefox]>, <Function test_python_runs_teacher[firefox]>, <Function test_buttons_disable_teacher[firefox]>, <Function test_python_runs_student[firefox]>, <Function test_buttons_disable_student[firefox]>, <Function test_title[firefox]>, <Function test_student_input[firefox]>]
            start_path: /home/tai/Documents/cpsc_4430_vandam/ice
            startdir: /home/tai/Documents/cpsc_4430_vandam/ice
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=10>
      pytest_runtest_protocol [hook]
          item: <Function test_title[firefox]>
          nextitem: <Function test_desired_outcome[firefox]>
        pytest_runtest_logstart [hook]
            nodeid: tests/main_page_test.py::test_title[firefox]
            location: ('tests/main_page_test.py', 16, 'test_title[firefox]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_title[firefox]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='pytestconfig' scope='session' baseid=''>
              request: <SubRequest 'pytestconfig' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> <_pytest.config.Config object at 0x7f639a0aea70> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='delete_output_dir' scope='session' baseid=''>
              request: <SubRequest 'delete_output_dir' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='base_url' scope='session' baseid=''>
              request: <SubRequest 'base_url' for <Function test_title[firefox]>>
          finish pytest_fixture_setup -->  [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_verify_url' scope='session' baseid=''>
              request: <SubRequest '_verify_url' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='browser_type_launch_args' scope='session' baseid=''>
              request: <SubRequest 'browser_type_launch_args' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> [hook]
              headless: False
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='playwright' scope='session' baseid=''>
              request: <SubRequest 'playwright' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> <playwright._impl._playwright.Playwright object at 0x7f6399403a30> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='browser_name' scope='session' baseid=''>
              request: <SubRequest 'browser_name' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> firefox [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='browser_type' scope='session' baseid=''>
              request: <SubRequest 'browser_type' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> <BrowserType name=firefox executable_path=/home/tai/.cache/ms-playwright/firefox-1463/firefox/firefox> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='launch_browser' scope='session' baseid=''>
              request: <SubRequest 'launch_browser' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> <function launch_browser.<locals>.launch at 0x7f639930b7f0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='browser' scope='session' baseid=''>
              request: <SubRequest 'browser' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> <Browser type=<BrowserType name=firefox executable_path=/home/tai/.cache/ms-playwright/firefox-1463/firefox/firefox> version=130.0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='device' scope='session' baseid=''>
              request: <SubRequest 'device' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_pw_artifacts_folder' scope='session' baseid=''>
              request: <SubRequest '_pw_artifacts_folder' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> <TemporaryDirectory '/tmp/playwright-pytest-9gz7m5hv'> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='browser_context_args' scope='session' baseid=''>
              request: <SubRequest 'browser_context_args' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> <pytest_playwright.pytest_playwright.ArtifactsRecorder object at 0x7f6398674280> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> <function new_context.<locals>._new_context at 0x7f6398655b40> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> <BrowserContext browser=<Browser type=<BrowserType name=firefox executable_path=/home/tai/.cache/ms-playwright/firefox-1463/firefox/firefox> version=130.0>> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> <Page url='about:blank'> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='before_each' scope='function' baseid='tests/main_page_test.py'>
              request: <SubRequest 'before_each' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_title[firefox]>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/main_page_test.py::test_title[firefox]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/main_page_test.py::test_title[firefox]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/main_page_test.py::test_title[firefox]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_title[firefox]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_title[firefox]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_title[firefox]>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/main_page_test.py::test_title[firefox]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/main_page_test.py::test_title[firefox]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/main_page_test.py::test_title[firefox]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_title[firefox]>
            nextitem: <Function test_desired_outcome[firefox]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='before_each' scope='function' baseid='tests/main_page_test.py'>
              request: <SubRequest 'before_each' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='before_each' scope='function' baseid='tests/main_page_test.py'>
              request: <SubRequest 'before_each' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_title[firefox]>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/main_page_test.py::test_title[firefox]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/main_page_test.py::test_title[firefox]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/main_page_test.py::test_title[firefox]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/main_page_test.py::test_title[firefox]
            location: ('tests/main_page_test.py', 16, 'test_title[firefox]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_desired_outcome[firefox]>
          nextitem: <Function test_student_link_navigates[firefox]>
        pytest_runtest_logstart [hook]
            nodeid: tests/main_page_test.py::test_desired_outcome[firefox]
            location: ('tests/main_page_test.py', 22, 'test_desired_outcome[firefox]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_desired_outcome[firefox]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_setup --> <pytest_playwright.pytest_playwright.ArtifactsRecorder object at 0x7f63986769e0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_setup --> <function new_context.<locals>._new_context at 0x7f63986e5e10> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_setup --> <BrowserContext browser=<Browser type=<BrowserType name=firefox executable_path=/home/tai/.cache/ms-playwright/firefox-1463/firefox/firefox> version=130.0>> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_setup --> <Page url='about:blank'> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='before_each' scope='function' baseid='tests/main_page_test.py'>
              request: <SubRequest 'before_each' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_desired_outcome[firefox]>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/main_page_test.py::test_desired_outcome[firefox]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/main_page_test.py::test_desired_outcome[firefox]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/main_page_test.py::test_desired_outcome[firefox]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_desired_outcome[firefox]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_desired_outcome[firefox]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_desired_outcome[firefox]>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/main_page_test.py::test_desired_outcome[firefox]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/main_page_test.py::test_desired_outcome[firefox]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/main_page_test.py::test_desired_outcome[firefox]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_desired_outcome[firefox]>
            nextitem: <Function test_student_link_navigates[firefox]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='before_each' scope='function' baseid='tests/main_page_test.py'>
              request: <SubRequest 'before_each' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='before_each' scope='function' baseid='tests/main_page_test.py'>
              request: <SubRequest 'before_each' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_desired_outcome[firefox]>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/main_page_test.py::test_desired_outcome[firefox]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/main_page_test.py::test_desired_outcome[firefox]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/main_page_test.py::test_desired_outcome[firefox]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/main_page_test.py::test_desired_outcome[firefox]
            location: ('tests/main_page_test.py', 22, 'test_desired_outcome[firefox]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_student_link_navigates[firefox]>
          nextitem: <Function test_embed_code_generation[firefox]>
        pytest_runtest_logstart [hook]
            nodeid: tests/main_page_test.py::test_student_link_navigates[firefox]
            location: ('tests/main_page_test.py', 29, 'test_student_link_navigates[firefox]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_student_link_navigates[firefox]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_setup --> <pytest_playwright.pytest_playwright.ArtifactsRecorder object at 0x7f63986744c0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_setup --> <function new_context.<locals>._new_context at 0x7f63986e68c0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_setup --> <BrowserContext browser=<Browser type=<BrowserType name=firefox executable_path=/home/tai/.cache/ms-playwright/firefox-1463/firefox/firefox> version=130.0>> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_setup --> <Page url='about:blank'> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='before_each' scope='function' baseid='tests/main_page_test.py'>
              request: <SubRequest 'before_each' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_student_link_navigates[firefox]>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/main_page_test.py::test_student_link_navigates[firefox]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/main_page_test.py::test_student_link_navigates[firefox]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/main_page_test.py::test_student_link_navigates[firefox]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_student_link_navigates[firefox]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_student_link_navigates[firefox]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_student_link_navigates[firefox]>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/main_page_test.py::test_student_link_navigates[firefox]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/main_page_test.py::test_student_link_navigates[firefox]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/main_page_test.py::test_student_link_navigates[firefox]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_student_link_navigates[firefox]>
            nextitem: <Function test_embed_code_generation[firefox]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='before_each' scope='function' baseid='tests/main_page_test.py'>
              request: <SubRequest 'before_each' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='before_each' scope='function' baseid='tests/main_page_test.py'>
              request: <SubRequest 'before_each' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_student_link_navigates[firefox]>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/main_page_test.py::test_student_link_navigates[firefox]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/main_page_test.py::test_student_link_navigates[firefox]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/main_page_test.py::test_student_link_navigates[firefox]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/main_page_test.py::test_student_link_navigates[firefox]
            location: ('tests/main_page_test.py', 29, 'test_student_link_navigates[firefox]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_embed_code_generation[firefox]>
          nextitem: <Function test_python_runs_teacher[firefox]>
        pytest_runtest_logstart [hook]
            nodeid: tests/main_page_test.py::test_embed_code_generation[firefox]
            location: ('tests/main_page_test.py', 54, 'test_embed_code_generation[firefox]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_embed_code_generation[firefox]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_setup --> <pytest_playwright.pytest_playwright.ArtifactsRecorder object at 0x7f63987443a0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_setup --> <function new_context.<locals>._new_context at 0x7f6398550040> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_setup --> <BrowserContext browser=<Browser type=<BrowserType name=firefox executable_path=/home/tai/.cache/ms-playwright/firefox-1463/firefox/firefox> version=130.0>> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_setup --> <Page url='about:blank'> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='before_each' scope='function' baseid='tests/main_page_test.py'>
              request: <SubRequest 'before_each' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_embed_code_generation[firefox]>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/main_page_test.py::test_embed_code_generation[firefox]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/main_page_test.py::test_embed_code_generation[firefox]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/main_page_test.py::test_embed_code_generation[firefox]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_embed_code_generation[firefox]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_embed_code_generation[firefox]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_embed_code_generation[firefox]>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/main_page_test.py::test_embed_code_generation[firefox]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/main_page_test.py::test_embed_code_generation[firefox]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/main_page_test.py::test_embed_code_generation[firefox]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_embed_code_generation[firefox]>
            nextitem: <Function test_python_runs_teacher[firefox]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='before_each' scope='function' baseid='tests/main_page_test.py'>
              request: <SubRequest 'before_each' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='before_each' scope='function' baseid='tests/main_page_test.py'>
              request: <SubRequest 'before_each' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_embed_code_generation[firefox]>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/main_page_test.py::test_embed_code_generation[firefox]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/main_page_test.py::test_embed_code_generation[firefox]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/main_page_test.py::test_embed_code_generation[firefox]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/main_page_test.py::test_embed_code_generation[firefox]
            location: ('tests/main_page_test.py', 54, 'test_embed_code_generation[firefox]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_python_runs_teacher[firefox]>
          nextitem: <Function test_buttons_disable_teacher[firefox]>
        pytest_runtest_logstart [hook]
            nodeid: tests/run_code_test.py::test_python_runs_teacher[firefox]
            location: ('tests/run_code_test.py', 7, 'test_python_runs_teacher[firefox]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_python_runs_teacher[firefox]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_python_runs_teacher[firefox]>>
          finish pytest_fixture_setup --> <pytest_playwright.pytest_playwright.ArtifactsRecorder object at 0x7f6398746b90> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_python_runs_teacher[firefox]>>
          finish pytest_fixture_setup --> <function new_context.<locals>._new_context at 0x7f63985520e0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_python_runs_teacher[firefox]>>
          finish pytest_fixture_setup --> <BrowserContext browser=<Browser type=<BrowserType name=firefox executable_path=/home/tai/.cache/ms-playwright/firefox-1463/firefox/firefox> version=130.0>> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_python_runs_teacher[firefox]>>
          finish pytest_fixture_setup --> <Page url='about:blank'> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_python_runs_teacher[firefox]>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/run_code_test.py::test_python_runs_teacher[firefox]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/run_code_test.py::test_python_runs_teacher[firefox]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/run_code_test.py::test_python_runs_teacher[firefox]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_python_runs_teacher[firefox]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_python_runs_teacher[firefox]>
        pytest_runtest_makereport [hook]
            item: <Function test_python_runs_teacher[firefox]>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError('Locator expected to have text \'Hello, world!\'\nActual value:  \nCall log:\nLocatorAssertions.to_have...an>\n  -   unexpected value ""\n  -   locator resolved to <span id="code-output"></span>\n  -   unexpected value ""\n') tblen=39>>
        finish pytest_runtest_makereport --> <TestReport 'tests/run_code_test.py::test_python_runs_teacher[firefox]' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/run_code_test.py::test_python_runs_teacher[firefox]' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/run_code_test.py::test_python_runs_teacher[firefox]' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_python_runs_teacher[firefox]>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError('Locator expected to have text \'Hello, world!\'\nActual value:  \nCall log:\nLocatorAssertions.to_have...an>\n  -   unexpected value ""\n  -   locator resolved to <span id="code-output"></span>\n  -   unexpected value ""\n') tblen=39>>
            report: <TestReport 'tests/run_code_test.py::test_python_runs_teacher[firefox]' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_python_runs_teacher[firefox]>
            nextitem: <Function test_buttons_disable_teacher[firefox]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_python_runs_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_python_runs_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_python_runs_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_python_runs_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_python_runs_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_python_runs_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_python_runs_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_python_runs_teacher[firefox]>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/run_code_test.py::test_python_runs_teacher[firefox]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/run_code_test.py::test_python_runs_teacher[firefox]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/run_code_test.py::test_python_runs_teacher[firefox]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/run_code_test.py::test_python_runs_teacher[firefox]
            location: ('tests/run_code_test.py', 7, 'test_python_runs_teacher[firefox]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_buttons_disable_teacher[firefox]>
          nextitem: <Function test_python_runs_student[firefox]>
        pytest_runtest_logstart [hook]
            nodeid: tests/run_code_test.py::test_buttons_disable_teacher[firefox]
            location: ('tests/run_code_test.py', 26, 'test_buttons_disable_teacher[firefox]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_buttons_disable_teacher[firefox]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_buttons_disable_teacher[firefox]>>
          finish pytest_fixture_setup --> <pytest_playwright.pytest_playwright.ArtifactsRecorder object at 0x7f6398745630> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_buttons_disable_teacher[firefox]>>
          finish pytest_fixture_setup --> <function new_context.<locals>._new_context at 0x7f63986e7010> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_buttons_disable_teacher[firefox]>>
          finish pytest_fixture_setup --> <BrowserContext browser=<Browser type=<BrowserType name=firefox executable_path=/home/tai/.cache/ms-playwright/firefox-1463/firefox/firefox> version=130.0>> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_buttons_disable_teacher[firefox]>>
          finish pytest_fixture_setup --> <Page url='about:blank'> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_buttons_disable_teacher[firefox]>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/run_code_test.py::test_buttons_disable_teacher[firefox]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/run_code_test.py::test_buttons_disable_teacher[firefox]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/run_code_test.py::test_buttons_disable_teacher[firefox]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_buttons_disable_teacher[firefox]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_buttons_disable_teacher[firefox]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_buttons_disable_teacher[firefox]>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/run_code_test.py::test_buttons_disable_teacher[firefox]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/run_code_test.py::test_buttons_disable_teacher[firefox]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/run_code_test.py::test_buttons_disable_teacher[firefox]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_buttons_disable_teacher[firefox]>
            nextitem: <Function test_python_runs_student[firefox]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_buttons_disable_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_buttons_disable_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_buttons_disable_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_buttons_disable_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_buttons_disable_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_buttons_disable_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_buttons_disable_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_buttons_disable_teacher[firefox]>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/run_code_test.py::test_buttons_disable_teacher[firefox]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/run_code_test.py::test_buttons_disable_teacher[firefox]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/run_code_test.py::test_buttons_disable_teacher[firefox]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/run_code_test.py::test_buttons_disable_teacher[firefox]
            location: ('tests/run_code_test.py', 26, 'test_buttons_disable_teacher[firefox]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_python_runs_student[firefox]>
          nextitem: <Function test_buttons_disable_student[firefox]>
        pytest_runtest_logstart [hook]
            nodeid: tests/run_code_test.py::test_python_runs_student[firefox]
            location: ('tests/run_code_test.py', 54, 'test_python_runs_student[firefox]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_python_runs_student[firefox]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_python_runs_student[firefox]>>
          finish pytest_fixture_setup --> <pytest_playwright.pytest_playwright.ArtifactsRecorder object at 0x7f6398675810> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_python_runs_student[firefox]>>
          finish pytest_fixture_setup --> <function new_context.<locals>._new_context at 0x7f63986e69e0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_python_runs_student[firefox]>>
          finish pytest_fixture_setup --> <BrowserContext browser=<Browser type=<BrowserType name=firefox executable_path=/home/tai/.cache/ms-playwright/firefox-1463/firefox/firefox> version=130.0>> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_python_runs_student[firefox]>>
          finish pytest_fixture_setup --> <Page url='about:blank'> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_python_runs_student[firefox]>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/run_code_test.py::test_python_runs_student[firefox]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/run_code_test.py::test_python_runs_student[firefox]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/run_code_test.py::test_python_runs_student[firefox]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_python_runs_student[firefox]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_python_runs_student[firefox]>
        pytest_runtest_makereport [hook]
            item: <Function test_python_runs_student[firefox]>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError('Locator expected to have text \'Hello, world!\'\nActual value:  \nCall log:\nLocatorAssertions.to_have...an>\n  -   unexpected value ""\n  -   locator resolved to <span id="code-output"></span>\n  -   unexpected value ""\n') tblen=39>>
        finish pytest_runtest_makereport --> <TestReport 'tests/run_code_test.py::test_python_runs_student[firefox]' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/run_code_test.py::test_python_runs_student[firefox]' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/run_code_test.py::test_python_runs_student[firefox]' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_python_runs_student[firefox]>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError('Locator expected to have text \'Hello, world!\'\nActual value:  \nCall log:\nLocatorAssertions.to_have...an>\n  -   unexpected value ""\n  -   locator resolved to <span id="code-output"></span>\n  -   unexpected value ""\n') tblen=39>>
            report: <TestReport 'tests/run_code_test.py::test_python_runs_student[firefox]' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_python_runs_student[firefox]>
            nextitem: <Function test_buttons_disable_student[firefox]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_python_runs_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_python_runs_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_python_runs_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_python_runs_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_python_runs_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_python_runs_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_python_runs_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_python_runs_student[firefox]>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/run_code_test.py::test_python_runs_student[firefox]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/run_code_test.py::test_python_runs_student[firefox]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/run_code_test.py::test_python_runs_student[firefox]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/run_code_test.py::test_python_runs_student[firefox]
            location: ('tests/run_code_test.py', 54, 'test_python_runs_student[firefox]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_buttons_disable_student[firefox]>
          nextitem: <Function test_title[firefox]>
        pytest_runtest_logstart [hook]
            nodeid: tests/run_code_test.py::test_buttons_disable_student[firefox]
            location: ('tests/run_code_test.py', 73, 'test_buttons_disable_student[firefox]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_buttons_disable_student[firefox]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_buttons_disable_student[firefox]>>
          finish pytest_fixture_setup --> <pytest_playwright.pytest_playwright.ArtifactsRecorder object at 0x7f63985aa8c0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_buttons_disable_student[firefox]>>
          finish pytest_fixture_setup --> <function new_context.<locals>._new_context at 0x7f6398552a70> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_buttons_disable_student[firefox]>>
          finish pytest_fixture_setup --> <BrowserContext browser=<Browser type=<BrowserType name=firefox executable_path=/home/tai/.cache/ms-playwright/firefox-1463/firefox/firefox> version=130.0>> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_buttons_disable_student[firefox]>>
          finish pytest_fixture_setup --> <Page url='about:blank'> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_buttons_disable_student[firefox]>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/run_code_test.py::test_buttons_disable_student[firefox]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/run_code_test.py::test_buttons_disable_student[firefox]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/run_code_test.py::test_buttons_disable_student[firefox]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_buttons_disable_student[firefox]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_buttons_disable_student[firefox]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_buttons_disable_student[firefox]>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/run_code_test.py::test_buttons_disable_student[firefox]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/run_code_test.py::test_buttons_disable_student[firefox]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/run_code_test.py::test_buttons_disable_student[firefox]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_buttons_disable_student[firefox]>
            nextitem: <Function test_title[firefox]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_buttons_disable_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_buttons_disable_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_buttons_disable_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_buttons_disable_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_buttons_disable_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_buttons_disable_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_buttons_disable_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_buttons_disable_student[firefox]>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/run_code_test.py::test_buttons_disable_student[firefox]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/run_code_test.py::test_buttons_disable_student[firefox]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/run_code_test.py::test_buttons_disable_student[firefox]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/run_code_test.py::test_buttons_disable_student[firefox]
            location: ('tests/run_code_test.py', 73, 'test_buttons_disable_student[firefox]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_title[firefox]>
          nextitem: <Function test_student_input[firefox]>
        pytest_runtest_logstart [hook]
            nodeid: tests/student_page_test.py::test_title[firefox]
            location: ('tests/student_page_test.py', 16, 'test_title[firefox]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_title[firefox]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> <pytest_playwright.pytest_playwright.ArtifactsRecorder object at 0x7f63985a8c70> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> <function new_context.<locals>._new_context at 0x7f63985539a0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> <BrowserContext browser=<Browser type=<BrowserType name=firefox executable_path=/home/tai/.cache/ms-playwright/firefox-1463/firefox/firefox> version=130.0>> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> <Page url='about:blank'> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='before_each' scope='function' baseid='tests/student_page_test.py'>
              request: <SubRequest 'before_each' for <Function test_title[firefox]>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_title[firefox]>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/student_page_test.py::test_title[firefox]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/student_page_test.py::test_title[firefox]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/student_page_test.py::test_title[firefox]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_title[firefox]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_title[firefox]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_title[firefox]>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/student_page_test.py::test_title[firefox]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/student_page_test.py::test_title[firefox]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/student_page_test.py::test_title[firefox]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_title[firefox]>
            nextitem: <Function test_student_input[firefox]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='before_each' scope='function' baseid='tests/student_page_test.py'>
              request: <SubRequest 'before_each' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='before_each' scope='function' baseid='tests/student_page_test.py'>
              request: <SubRequest 'before_each' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_title[firefox]>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/student_page_test.py::test_title[firefox]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/student_page_test.py::test_title[firefox]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/student_page_test.py::test_title[firefox]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/student_page_test.py::test_title[firefox]
            location: ('tests/student_page_test.py', 16, 'test_title[firefox]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_student_input[firefox]>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: tests/student_page_test.py::test_student_input[firefox]
            location: ('tests/student_page_test.py', 22, 'test_student_input[firefox]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_student_input[firefox]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_student_input[firefox]>>
          finish pytest_fixture_setup --> <pytest_playwright.pytest_playwright.ArtifactsRecorder object at 0x7f63985abbe0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_student_input[firefox]>>
          finish pytest_fixture_setup --> <function new_context.<locals>._new_context at 0x7f63985509d0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_student_input[firefox]>>
          finish pytest_fixture_setup --> <BrowserContext browser=<Browser type=<BrowserType name=firefox executable_path=/home/tai/.cache/ms-playwright/firefox-1463/firefox/firefox> version=130.0>> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_student_input[firefox]>>
          finish pytest_fixture_setup --> <Page url='about:blank'> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='before_each' scope='function' baseid='tests/student_page_test.py'>
              request: <SubRequest 'before_each' for <Function test_student_input[firefox]>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_student_input[firefox]>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/student_page_test.py::test_student_input[firefox]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/student_page_test.py::test_student_input[firefox]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/student_page_test.py::test_student_input[firefox]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_student_input[firefox]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_student_input[firefox]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_student_input[firefox]>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/student_page_test.py::test_student_input[firefox]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/student_page_test.py::test_student_input[firefox]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/student_page_test.py::test_student_input[firefox]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_student_input[firefox]>
            nextitem: None
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='before_each' scope='function' baseid='tests/student_page_test.py'>
              request: <SubRequest 'before_each' for <Function test_student_input[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='before_each' scope='function' baseid='tests/student_page_test.py'>
              request: <SubRequest 'before_each' for <Function test_student_input[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_student_input[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='page' scope='function' baseid=''>
              request: <SubRequest 'page' for <Function test_student_input[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_student_input[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='context' scope='function' baseid=''>
              request: <SubRequest 'context' for <Function test_student_input[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_student_input[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_student_input[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_student_input[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_student_input[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_buttons_disable_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_python_runs_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_buttons_disable_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_python_runs_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='browser_context_args' scope='session' baseid=''>
              request: <SubRequest 'browser_context_args' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_student_input[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_buttons_disable_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_python_runs_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_buttons_disable_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_python_runs_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='browser_context_args' scope='session' baseid=''>
              request: <SubRequest 'browser_context_args' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_pw_artifacts_folder' scope='session' baseid=''>
              request: <SubRequest '_pw_artifacts_folder' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='browser_context_args' scope='session' baseid=''>
              request: <SubRequest 'browser_context_args' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='device' scope='session' baseid=''>
              request: <SubRequest 'device' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_student_input[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_buttons_disable_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_python_runs_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_buttons_disable_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_python_runs_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='new_context' scope='function' baseid=''>
              request: <SubRequest 'new_context' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='browser' scope='session' baseid=''>
              request: <SubRequest 'browser' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='browser' scope='session' baseid=''>
              request: <SubRequest 'browser' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='launch_browser' scope='session' baseid=''>
              request: <SubRequest 'launch_browser' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='launch_browser' scope='session' baseid=''>
              request: <SubRequest 'launch_browser' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='browser_type' scope='session' baseid=''>
              request: <SubRequest 'browser_type' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='browser_type' scope='session' baseid=''>
              request: <SubRequest 'browser_type' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='browser_name' scope='session' baseid=''>
              request: <SubRequest 'browser_name' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_student_input[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_buttons_disable_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_python_runs_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_buttons_disable_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_python_runs_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='browser_context_args' scope='session' baseid=''>
              request: <SubRequest 'browser_context_args' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='browser_type' scope='session' baseid=''>
              request: <SubRequest 'browser_type' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='playwright' scope='session' baseid=''>
              request: <SubRequest 'playwright' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='launch_browser' scope='session' baseid=''>
              request: <SubRequest 'launch_browser' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='browser_type_launch_args' scope='session' baseid=''>
              request: <SubRequest 'browser_type_launch_args' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_verify_url' scope='session' baseid=''>
              request: <SubRequest '_verify_url' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='browser_context_args' scope='session' baseid=''>
              request: <SubRequest 'browser_context_args' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_verify_url' scope='session' baseid=''>
              request: <SubRequest '_verify_url' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='base_url' scope='session' baseid=''>
              request: <SubRequest 'base_url' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='delete_output_dir' scope='session' baseid=''>
              request: <SubRequest 'delete_output_dir' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_student_input[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_buttons_disable_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_python_runs_student[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_buttons_disable_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_python_runs_teacher[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_embed_code_generation[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_student_link_navigates[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_desired_outcome[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_artifacts_recorder' scope='function' baseid=''>
              request: <SubRequest '_artifacts_recorder' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='browser_context_args' scope='session' baseid=''>
              request: <SubRequest 'browser_context_args' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='device' scope='session' baseid=''>
              request: <SubRequest 'device' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='browser_type_launch_args' scope='session' baseid=''>
              request: <SubRequest 'browser_type_launch_args' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='delete_output_dir' scope='session' baseid=''>
              request: <SubRequest 'delete_output_dir' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='pytestconfig' scope='session' baseid=''>
              request: <SubRequest 'pytestconfig' for <Function test_title[firefox]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_student_input[firefox]>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/student_page_test.py::test_student_input[firefox]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/student_page_test.py::test_student_input[firefox]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/student_page_test.py::test_student_input[firefox]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f639a0aea70>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/student_page_test.py::test_student_input[firefox]
            location: ('tests/student_page_test.py', 22, 'test_student_input[firefox]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session  exitstatus=<ExitCode.TESTS_FAILED: 1> testsfailed=2 testscollected=10>
        exitstatus: 1
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x7f6399fa1ea0>
          exitstatus: 1
          config: <_pytest.config.Config object at 0x7f639a0aea70>
      early skip of rewriting module: pygments [assertion]
      early skip of rewriting module: pygments.lexers [assertion]
      early skip of rewriting module: pygments.lexers._mapping [assertion]
      early skip of rewriting module: pygments.modeline [assertion]
      early skip of rewriting module: pygments.plugin [assertion]
      early skip of rewriting module: pygments.util [assertion]
      early skip of rewriting module: pygments.lexers.python [assertion]
      early skip of rewriting module: pygments.lexer [assertion]
      early skip of rewriting module: pygments.filter [assertion]
      early skip of rewriting module: pygments.filters [assertion]
      early skip of rewriting module: pygments.token [assertion]
      early skip of rewriting module: pygments.regexopt [assertion]
      early skip of rewriting module: pygments.unistring [assertion]
      early skip of rewriting module: pygments.formatters [assertion]
      early skip of rewriting module: pygments.formatters._mapping [assertion]
      early skip of rewriting module: pygments.formatters.terminal [assertion]
      early skip of rewriting module: pygments.formatter [assertion]
      early skip of rewriting module: pygments.styles [assertion]
      early skip of rewriting module: pygments.styles._mapping [assertion]
      early skip of rewriting module: pygments.console [assertion]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/run_code_test.py::test_python_runs_teacher[firefox]' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f639a0aea70>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/run_code_test.py::test_python_runs_student[firefox]' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f639a0aea70>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x7f639a0aea70>
    finish pytest_unconfigure --> [] [hook]
